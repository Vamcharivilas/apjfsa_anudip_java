/*1.Implement a program that utilizes the Geometry class to calculate the area of a rectangle, area of a circle, and volume of a box. Demonstrate the usage of each overloaded method in your program.

o/p:

Geometry Calculator

1. Calculate area of a rectangle 

2. Calculate area of a circle 

3. Calculate volume of a box 

4. Exit 

Enter your choice (1-4):*/
package labs;

import java.util.Scanner;

class Geometry {// Blue print class
	// Implement Geometry class to calculate the area of a rectangle, area of a
	// circle, and volume of a box.
	// Demonstrate the usage of each overloaded method in your program.
	public static double areaOfRectangle(double length, double breath) {
		// area of a rectangle
		return length * breath;

	}

	public static double areaOfCircle(double radius, double PI) {
		// area of a circle
		return PI * radius * radius;

	}

	public static double areaOfBox(double length, double breath, double height) {
		// volume/area of a box
		return length * height * breath;
	}
}

public class AreaCalc {// user logic class
	public static void main(String[] args) {// Scanner class within main
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		int choice;
		do {// do for atleast execute once
			System.out.println("\nGeometry Calculator");
			System.out.println("1. Calculate area of a rectangle");
			System.out.println("2. Calculate area of a circle");
			System.out.println("3. Calculate volume of a box");
			System.out.println("4. Exit");
			System.out.print("Enter your choice (1-4): ");
			choice = sc.nextInt();
			switch (choice) {// using switch for choice
			case 1:// area of rectangle
				System.out.print("Enter the length of the rectangle: ");
				double length = sc.nextDouble();
				System.out.print("Enter the width of the rectangle: ");
				double width = sc.nextDouble();
				System.out.println("Area of the rectangle: " + Geometry.areaOfRectangle(length, width));
				break;
			case 2:// area of circle
				System.out.println("Enter the value of Pi:");
				double PI = sc.nextDouble();
				System.out.println("Enter the radius of the circle");
				double radius = sc.nextDouble();
				System.out.println("Area of the Circle : " + Geometry.areaOfCircle(radius, PI));
				break;
			case 3:// area of box
				System.out.println("Enter the length of the Box:");
				double l = sc.nextDouble();
				System.out.println("Enter the breath of the Box:");
				double b = sc.nextDouble();
				System.out.println("Enter the height of the Box:");
				double h = sc.nextDouble();
				System.out.println("Area of the Box:" + Geometry.areaOfBox(l, b, h));
				break;
			case 4:// exit
				System.out.println("Exit");
				break;

			default:
				System.out.println("Enter the  valid choice ");
				break;
			}

		} while (choice != 4);

	}

}
*****************************************************************************************************************************
/*2.Design a Java program to manage bank accounts. Implement a class called BankAccount with the following functionalities:

Overload constructors to initialize the account with different types (e.g., savings account, checking account).

Implement methods to deposit, withdraw, and check the balance in the account.

Overload the deposit method to accept different types of deposits (e.g., deposit by cash, deposit by check).*/

package labs;

import java.util.Scanner;

class BankAccount {// blue print class
//Designing a Java program to manage bank accounts.
// Implement a class called BankAccount with the following functionalities:
//Overload constructors to initialize the account with different types 
	// (e.g., savings account, checking account).
//Overload the deposit method to accept different types of deposits (e.g., deposit by cash, deposit by check).
	String accountNo;
	String accounttype;
	double balance;

	public BankAccount(String accounttype) {// constructor1
		this.accounttype = accounttype;
		this.balance = balance;
	}

	BankAccount(String accountNo, String accounttype, double balance) {// constructor2
		this.accountNo = accountNo;
		this.accounttype = accounttype;
		this.balance = balance;
	}

	public void deposit(double amount) {// deposit method with 1 parameter
		balance = balance + amount;
		System.out.println("Deposit of" + amount);
	}

	public void deposit(double amount, String deposittype) {// deposit method with 2 parameter
		balance = balance + amount;
		System.out.println("Deposit of " + amount + " by " + deposittype);
	}

	public void withdraw(double amount) {// withdraw method with 1 parameter
		if (balance >= amount) {
			balance = balance - amount;
			System.out.println("Withdrawal" + amount);
		} else {
			System.out.println("Insufficient balance");
		}
	}

	public double checkBalance() {// checkbalance withno parameter
		return balance;
	}
}

public class AccountHolder {// user logic class

	public static void main(String[] args) {// Scanner class within main
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		BankAccount savings = new BankAccount("Savings");// object of savings type
		BankAccount check = new BankAccount("Checking");// object of checking type
		System.out.print("Enter deposit amount for savings account: ");
		double depositAmount = sc.nextDouble();
		savings.deposit(depositAmount);

		System.out.print("Enter deposit amount for checking account: ");
		depositAmount = sc.nextDouble();
		check.deposit(depositAmount);

		System.out.print("Enter withdrawal amount from savings account: ");
		double withdrawAmount = sc.nextDouble();
		savings.withdraw(withdrawAmount);

		System.out.print("Enter withdrawal amount from checking account: ");
		withdrawAmount = sc.nextDouble();
		check.withdraw(withdrawAmount);

		System.out.println("Savings Account Balance:" + savings.checkBalance());

		System.out.println("Check Account Balance:" + check.checkBalance());

		sc.close();

	}

}

***********************************************************************************************************************************
/*3.You are building a user authentication system in Java. Implement a class called UserManager that contains overloaded methods for user authentication.
 The overloaded methods should accept different combinations of parameters, such as username and password, email and password, or phone number and PIN.
 Ensure that the method implementations correctly authenticate users based on the provided parameters.*/
package labs;

class UserManage {// blue print class
	// building a user authentication system in Java.
	// Implement a class called UserManager that contains overloaded methods for
	// user authentication.
	// such as username and password, email and password, or phone number and PIN.
	// The overloaded methods should accept different combinations of parameters,
	public static void authenticate(String username, String password) {
		System.out.println(username + " YOUR login successful.");
	}

	public static void authenticate(String email, long phoneno) {
		System.out.println(email + "  YOUR  login successful using EmailId.");
	}

	public static void authenticate(long phoneno, int pin) {
		System.out.println(phoneno + " YOUR login successful using phoneNo.  ");
	}

	public static void authenticate(String email, int pin) {
		System.out.println(email + "  YOUR  login successful using EmailId.");
	}

	public static void authenticate(long phoneno, String password) {
		System.out.println(phoneno + "  YOUR  login successful using PhoneNo.");
	}

}

class Authentication {// user logic class

	public static void main(String[] args) {// Scanner class within main
		// TODO Auto-generated method stub
//Ensure that the method implementations correctly authenticate users based on the provided parameters.
		UserManage u = new UserManage();// object creation
		u.authenticate(9866710852l, 141711);
		u.authenticate("viraj111@gmail.com", 9866710852l);
		u.authenticate("@Villain_hypnotic_urge", "*************");
		u.authenticate("hasinipandithi@gmail.com", 12112);
		u.authenticate(9855710825l, "^^^^^^^^^^^^");

	}

}


